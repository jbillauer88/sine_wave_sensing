/*

2018 EDP Grad Critique Project #1 
by Jeremy Billauer

Sine Wave Sensing || Rider DNA

This is a sketch that visualizes data gathered from multiple pressure and IMU sensors
to present a method from which the viewer can compare and contrast the movement of
different individuals. In this case there are four different individuals all performing
the same activity of snowboarding.

Sensors were placed in the heel and toe area of each foot along with IMU sensors
on each foot. Data was gathered at intervals of 30 seconds and provided CSV data that
could be interpreted and utilized by this Processing sketch.

The wave class takes advantage of C. Andrews method of drawing a simple sine wave
with the beginShape() and endShape() functions. 

Values are brought in from CSV file and stored in variables that apply to different waves.
The amount of waves is generated by the amount of "rows" in the dataset. 
Default is between 100 and 200

There are 10 values that get brought in and applied to various elements of each wave:

  Left Toe > Amplitude
  Left Heel > Frequency
  Right Toe > Type of wave (sine or cosine)
  Right Heel > y value for the center of the wave
  Left X > Wave Rotation around x-axis
  Left Y > 
  Left Z > Number of points on the wave
  Right X > r value for stroke(rgb)
  Right Y > g value for stroke(rgb)
  Right Z > b value for stroke(rgb)
  
**/

// Import PDF library and create variables for frame capture
import processing.pdf.*;
int version = 10;
boolean record;


// Global Variables For CSV Parsing
String csv[];
String myData[][];
Wave[] waves = new Wave[200];

//Wave myWave, myWave2; // Original Wave Class testing

void setup() {
  size(1280, 720, P3D); 
  //background(0);
  colorMode(HSB,360,100,100);
  frameRate(40);
  smooth(8);
  
  // Load all the CSVs here and comment them in and out to visualize different datasets
  //csv = loadStrings("jeremy.csv"); // Data from "incomplete" run
  csv = loadStrings("jeremy2.csv"); // Data from Jeremy's run
  //csv = loadStrings("brian.csv"); // Data from Brian's run
  //csv = loadStrings("jill.csv"); // Data from Jill's run
  //csv = loadStrings("tyson.csv"); // Data from Tyson's run
  myData = new String[csv.length][9];
 
  for(int i = 0; i<csv.length; i++){
   myData[i] = csv[i].split(",");
 }
    
  // Iterating through each row of the active dataset and using different values as attributes of each Wave
  for(int j = 0; j < myData.length; j++){
    waves[j] = new Wave(int(myData[j][0]), int(myData[j][2]), int(myData[j][5])+1, int(myData[j][3]), int(myData[j][4])+100, int(myData[j][5]), int(myData[j][8]));
  } 
}


void draw() {
  
  // Used to save frame to be printed later
  if (record) {
    beginRaw(PDF, "output"+version+".pdf");
    hint(ENABLE_DEPTH_SORT);
  }
  
  background(10);
  fill(10);
  rect(-50, -50, width+100, height+100);
  noFill();
  
  // Get the waves in the middle of the screen
  translate(0, height/2);
  
  // Iterate through and update each Wave
  for(int k = 0; k < myData.length; k++){
    waves[k].display();
    waves[k].move();
  }
  
  // End frame capture
  if (record) {
    endRaw();
    record = false;
  }
}

// Hit 'r' to record a single frame
void keyPressed() {
  if (key == 'r') {
    record = true;
    version ++;
  }
} 